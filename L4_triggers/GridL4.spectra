spec GridL4

define upper:=8;

type Coord = Int(0..upper);
env Coord[2] rob;

sys {UP, DOWN, LEFT, RIGHT, STAY} move;

define p1 := rob[0]=0 & rob[1]=0;
define p2 := rob[0]=0 & rob[1]=upper;
define p3 := rob[0]=upper & rob[1]=0;

asm ini p1;
asm alw move=UP implies minusOne(rob[1]) & fix(rob[0]);
asm alw move=DOWN implies plusOne(rob[1]) & fix(rob[0]);
asm alw move=LEFT implies minusOne(rob[0]) & fix(rob[1]);
asm alw move=RIGHT implies plusOne(rob[0]) & fix(rob[1]);

predicate plusOne (Coord c):
 c + 1 = next (c) | (c = upper & next(c)=c);
predicate minusOne (Coord c):
 c -1 = next (c) | (c = 0 & next(c)=c);
predicate fix (Coord c):
 next(c)=c;

gar alwEv p2;
gar alwEv p3;
